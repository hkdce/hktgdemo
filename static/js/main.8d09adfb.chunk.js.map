{"version":3,"sources":["data/Data.ts","components/GoogleMap.tsx","components/GoogleMapMarker.tsx","Actions.ts","TGCasesMap.tsx","TGCasesTable.tsx","TGCaseSelectPane.tsx","TGCasePanel.tsx","TGCasesVideos.tsx","App.tsx","Reducers.ts","serviceWorker.ts","index.tsx"],"names":["videoRefs","require","tgCases","LatLngBounds","google","maps","GoogleMapContext","React","createContext","GoogleMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","map","lastPanTo","Map","refs","mapCanvas","center","lat","lng","zoom","setState","react_default","a","createElement","Fragment","ref","style","height","Provider","value","children","prevProps","e","panTo","offsetWidth","offsetHeight","getClientRects","length","bbox","bounds","fitBounds","Component","GoogleMapMarker","marker","createMarkerFromProp","setMap","unbindAll","undefined","nextMap","visible","context","getMap","Marker","position","title","addListener","onClick","bind","tag","contextType","selectCase","createAction","TGCasesMap","components_GoogleMap","tgCasesList","tgCase","components_GoogleMapMarker","case_id","lon","onMarkerClick","caseId","dispatch","ConnectedTGCasesMap","connect","selectedCaseId","forwardRef","tableOptions","defaultSortName","defaultSortOrder","ConnectedTGCasesTable","selectRowProp","mode","bgColor","clickToSelect","selected","onSelect","row","isSelected","lib","condensed","data","options","selectRow","version","isKey","dataField","dataSort","DistrictSelectPane","districtMapRef","createRef","current","forceUpdate","_this2","values","Tabs_default","defaultActiveKey","id","onTabUpdate","Tab_default","tabClassName","eventKey","src_TGCasesMap","src_TGCasesTable","ConnectedTGCasePanel","Card_default","Header","Body","case_site","cartridge","quantity","renderVideoPlayer","iVideoEvidence","iRefVideoCode","elapsedSeconds","timeString","components","split","parseInt","getElapsedSecondsFromTimeString","iCompiledURL","concat","toString","player","ReactPlayer_default","url","playing","controls","onStart","seekTo","width","ConnectedTGCaseVideos","className","live_video_refs","ConnectedApp","Container_default","fluid","Row_default","Col_default","TGCaseSelectPane","md","src_TGCasePanel","TGCasesVideos","initialState","reducers","createReducer","defineProperty","type","action","payload","Boolean","window","location","hostname","match","ReduxQuerySync","default","store","configureStore","reducer","Reducers","params","case","selector","defaultValue","initialTruth","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d09adfb.chunk.js","sourcesContent":["import { VideoRefs, TGCases } from \"../Types\";\n\nexport const videoRefs: VideoRefs = require('./videos.json');\nexport const tgCases: TGCases = require('./tgcases.json');\n","/// <reference types=\"googlemaps\" />\n\nimport React from 'react';\nimport { BBox } from 'geojson';\n\ndeclare const google: any;\nconst LatLngBounds = google.maps.LatLngBounds;\n\ntype State = {\n  map: google.maps.Map | null;\n  lastPanTo: [ string, BBox ] | null;\n}\n\ntype OwnProps = {\n  panTo?: [ string, BBox ]; // The first element is the pan id to avoid panning twice.\n}\n\ntype Props = OwnProps;\n\nexport const GoogleMapContext = React.createContext<google.maps.Map | null>(null);\n\nconst isVisible = (e: HTMLElement): boolean => {\n  return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);\n}\n\nclass GoogleMap extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      map: null,\n      lastPanTo: null\n\t\t};\n  }\n\n  componentDidMount() {\n    if (!this.state.map) {\n      const mapOptions = {\n        center: { lat: 22.3300, lng: 114.1880 },\n        zoom: 11,\n      };\n      const map = new google.maps.Map(this.refs.mapCanvas as Element, mapOptions);\n      this.setState({ map });\n    }\n  }\n\n  render() {\n\t\treturn (\n      <React.Fragment>\n        <div ref=\"mapCanvas\" style={{height: \"100%\"}}></div>\n        <GoogleMapContext.Provider value={this.state.map}>{this.props.children}</GoogleMapContext.Provider>\n      </React.Fragment>\n\t\t);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!this.props.panTo || (this.state.lastPanTo && this.props.panTo[0] === this.state.lastPanTo[0])) return;\n    if (!this.state.map) return;\n    if (!this.refs.mapCanvas || !isVisible(this.refs.mapCanvas as HTMLElement)) return;\n\n    this.panTo(this.state.map, this.props.panTo[1]);\n    this.setState({\n      lastPanTo: this.props.panTo\n    });\n  }\n\n  private panTo(map: google.maps.Map, bbox: BBox) {\n    const bounds = new LatLngBounds({lat: bbox[1], lng: bbox[0]}, {lat: bbox[3], lng: bbox[2]});\n    map.fitBounds(bounds, 0);\n  }\n}\n\nexport default GoogleMap;\n","/// <reference types=\"googlemaps\" />\n\nimport React from 'react';\nimport { GoogleMapContext } from './GoogleMap';\n\ndeclare const google: any;\n\ntype State = {\n  marker?: google.maps.Marker;\n}\n\ntype OwnProps = {\n  lat: number;\n  lng: number;\n  title: string;\n  tag: string;\n  visible: boolean;\n  onClick?: (tag: string) => void;\n}\n\ntype Props = OwnProps;\n\nclass GoogleMapMarker extends React.Component<Props, State> {\n  static contextType = GoogleMapContext;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    if (!this.state.marker) {\n      const marker = this.createMarkerFromProp(this.props);\n      this.setState({ marker });\n    }\n  }\n\n  componentWillUnmount() {\n    if (!this.state.marker) return;\n\n    this.state.marker.setMap(null);\n    this.state.marker.unbindAll();\n    this.setState({ marker: undefined });\n  }\n\n  render() {\n    const marker = this.state.marker;\n    if (marker) {\n      const nextMap: google.maps.Map = this.props.visible ? this.context : null;\n      if (marker.getMap() !== nextMap) {\n        marker.setMap(nextMap);\n      }\n    }\n\n    return null;\n  }\n\n  createMarkerFromProp(props: Props) {\n    const marker: google.maps.Marker = new google.maps.Marker({\n      position: { lat: props.lat, lng: props.lng },\n      title: props.title\n    });\n    marker.addListener('click', this.onClick.bind(this, props.tag));\n\n    return marker;\n  }\n\n  onClick(tag: string) {\n    if (this.props.onClick) {\n      this.props.onClick(tag);\n    }\n  }\n}\n\nexport default GoogleMapMarker;\n","import { createAction } from 'redux-starter-kit';\n\nexport const selectCase = createAction('selectCase');\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport GoogleMap from './components/GoogleMap';\nimport { TGCase, ReduxState } from './Types';\nimport GoogleMapMarker from './components/GoogleMapMarker';\nimport { selectCase } from './Actions';\n\ntype StateProps = {\n  selectedCaseId?: string;\n}\n\ntype OwnProps = {\n  tgCasesList: TGCase[];\n}\n\ntype DispatchProps = {\n  dispatch: Dispatch;\n}\n\ntype Props = StateProps & OwnProps & DispatchProps;\n\nclass TGCasesMap extends React.Component<Props> {\n  render() {\n    return (\n      <GoogleMap>\n        {\n          this.props.tgCasesList.map(tgCase =>\n            <GoogleMapMarker title={ tgCase.case_id }\n                             tag={ tgCase.case_id } lat={ tgCase.lat } lng={ tgCase.lon }\n                             visible={ true }\n                             onClick={ this.onMarkerClick.bind(this)} />\n          )\n        }\n      </GoogleMap>\n    );\n  }\n\n  onMarkerClick(caseId: string) {\n    this.props.dispatch(selectCase(caseId));\n  }\n}\n\nconst mapStateToProps = (state: ReduxState): StateProps => {\n  return {\n    selectedCaseId: state.caseId\n  };\n};\n\nexport type TGCasesMapType = TGCasesMap;\n\nconst ConnectedTGCasesMap = connect(mapStateToProps, null, null, { forwardRef: true })(TGCasesMap);\nexport default ConnectedTGCasesMap;\n","import React from 'react';\nimport { BootstrapTable, SelectRow, SelectRowMode, SortOrder, TableHeaderColumn } from 'react-bootstrap-table';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { TGCase, ReduxState } from './Types';\nimport { selectCase } from './Actions';\n\nimport '../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\n\ntype StateProps = {\n  selectedCaseId?: string;\n}\n\ntype OwnProps = {\n  tgCasesList: TGCase[];\n}\n\ntype DispatchProps = {\n  dispatch: Dispatch;\n}\n\ntype Props = StateProps & OwnProps & DispatchProps;\n\nconst tableOptions = {\n  defaultSortName: 'case_id',\n  defaultSortOrder: 'asc' as SortOrder\n};\n\nconst TGCasesTable: React.FunctionComponent<Props> = (props) => {\n  const selectRowProp: SelectRow = {\n    mode: 'radio' as SelectRowMode,\n    bgColor: '#78deee',\n    clickToSelect: true,\n    selected: props.selectedCaseId ? [ props.selectedCaseId ] : undefined,\n    onSelect: (row, isSelected: boolean) => { if (isSelected) props.dispatch(selectCase(row['case_id'])) }\n  };\n\n  return (\n    <BootstrapTable condensed={ true } data={ props.tgCasesList } options={ tableOptions } selectRow={ selectRowProp } version='4'>\n      <TableHeaderColumn isKey dataField='case_id' dataSort={ true }>Case ID</TableHeaderColumn>\n      <TableHeaderColumn dataField='case_datetime' dataSort={ true }>Case DateTime</TableHeaderColumn>\n      <TableHeaderColumn dataField='case_site' dataSort={ true }>Case Site</TableHeaderColumn>\n      <TableHeaderColumn dataField='quantity' dataSort={ true }>Quantity</TableHeaderColumn>\n    </BootstrapTable>\n  );\n}\n\nconst mapStateToProps = (state: ReduxState): StateProps => {\n  return {\n    selectedCaseId: state.caseId\n  };\n};\n\nconst ConnectedTGCasesTable = connect(mapStateToProps, null, null, { forwardRef: true })(TGCasesTable);\nexport default ConnectedTGCasesTable;\n","import React from 'react';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\n\nimport { tgCases } from './data/Data';\nimport TGCasesMap, { TGCasesMapType } from './TGCasesMap';\nimport TGCasesTable from './TGCasesTable';\n\ntype Props = {\n}\n\nclass DistrictSelectPane extends React.Component<Props> {\n  private districtMapRef: React.RefObject<TGCasesMapType> = React.createRef();\n\n  onTabUpdate() {\n    if (this.districtMapRef.current) {\n      this.districtMapRef.current.forceUpdate();\n    }\n  }\n\n  render() {\n    const tgCasesList = Object.values(tgCases);\n    return (\n      <Tabs defaultActiveKey=\"map\" id=\"selectCasePane\" onSelect={ () => this.onTabUpdate() }>\n        <Tab style={{ height: \"95vh\" }} tabClassName=\"thinTab\" eventKey=\"map\" title=\"Map\">\n          <TGCasesMap ref={ this.districtMapRef } tgCasesList={ tgCasesList }/>\n        </Tab>\n        <Tab tabClassName=\"thinTab\" eventKey=\"list\" title=\"List\">\n          <TGCasesTable tgCasesList={ tgCasesList }/>\n        </Tab>\n      </Tabs>\n    );\n  }\n}\n\nexport default DistrictSelectPane;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport { connect } from 'react-redux';\nimport { TGCase, ReduxState } from './Types';\nimport { tgCases } from './data/Data';\n\ntype StateProps = {\n  caseId?: string;\n}\n\ntype OwnProps = {\n}\n\ntype DispatchProps = {\n}\n\ntype Props = StateProps & OwnProps & DispatchProps;\n\n\nconst TGCasePanel: React.FunctionComponent<Props> = (props) => {\n  if (props.caseId) {\n    const tgCase: TGCase = tgCases[props.caseId];\n    return (\n      <Card>\n        <Card.Header>{ tgCase.case_id }</Card.Header>\n        <Card.Body>\n          <div>Site: { tgCase.case_site }</div>\n          <div>Cartridge: { tgCase.cartridge }</div>\n          <div>Quantity: { tgCase.quantity }</div>\n        </Card.Body>\n      </Card>\n    );\n  } else {\n    return null;\n  }\n}\n\nconst mapStateToProps = (state: ReduxState): StateProps => {\n  return {\n    caseId: state.caseId,\n  };\n};\n\nconst ConnectedTGCasePanel = connect(mapStateToProps)(TGCasePanel);\nexport default ConnectedTGCasePanel;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { TGCase, ReduxState } from './Types';\nimport { tgCases, videoRefs } from './data/Data';\nimport ReactPlayer from 'react-player'\n\ntype StateProps = {\n  caseId?: string;\n}\n\ntype OwnProps = {\n}\n\ntype DispatchProps = {\n}\n\ntype Props = StateProps & OwnProps & DispatchProps;\n\nfunction renderVideoPlayer(iVideoEvidence:string[]){\n\n    let iRefVideoCode:string = iVideoEvidence[0];\n    let elapsedSeconds:number = getElapsedSecondsFromTimeString(iVideoEvidence[1]);\n    let iCompiledURL:string = videoRefs[iRefVideoCode]['url'].concat('?t=', elapsedSeconds.toString());\n\n    let player = React.createRef<ReactPlayer>();\n\n    function handleVideoStart(){\n      if (player.current){\n        player.current.seekTo(elapsedSeconds)\n      }\n    }\n\n    return (<ReactPlayer \n            ref={player}\n            url={iCompiledURL}\n            playing={false} \n            controls={true}\n            onStart={handleVideoStart}\n            width={'100%'}\n            height={'100%'}\n            />)    \n\n}\n\n// Function for converting hh:mm:ss string to elapsed seconds\nfunction getElapsedSecondsFromTimeString(timeString: string):number{\n    // Presume the timeString is in the format of hh:mm:ss\n    let components = timeString.split(':');\n    let elapsedSeconds:number = parseInt(components[0])*3600 +parseInt(components[1])*60 + parseInt(components[2]);\n    return elapsedSeconds;\n}\n\nconst TGCaseVidoes: React.FunctionComponent<Props> = (props) => {\n  if (props.caseId) {\n    const tgCase: TGCase = tgCases[props.caseId];\n    return (\n\n      <div className=\"videosCol\">\n          {tgCase.live_video_refs.map(iVideoEvidence => {\n            return renderVideoPlayer(iVideoEvidence)\n          })}\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n\nconst mapStateToProps = (state: ReduxState): StateProps => {\n  return {\n    caseId: state.caseId,\n  };\n};\n\nconst ConnectedTGCaseVideos = connect(mapStateToProps)(TGCaseVidoes);\nexport default ConnectedTGCaseVideos;\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport { connect } from 'react-redux';\nimport TGCaseSelectPane from './TGCaseSelectPane';\nimport TGCasePanel from './TGCasePanel';\nimport TGCaseVideo from './TGCasesVideos';\nimport { ReduxState } from './Types';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\ntype OwnProps = {\n}\n\ntype StateProps = {\n}\n\ntype DispatchProps = {\n}\n\ntype Props = StateProps & OwnProps & DispatchProps;\n\nconst App: React.FunctionComponent<Props> = (props) => {\n  return (\n    <div className=\"App\">\n      <Container fluid={true} >\n        <Row>\n          <Col className=\"thinCol\">\n            <TGCaseSelectPane/>\n          </Col>\n          <Col className=\"thinCol\" md=\"3\">\n            <TGCasePanel/>\n             <TGCaseVideo/>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: ReduxState): StateProps => {\n  return {};\n};\n\nconst ConnectedApp = connect(mapStateToProps)(App);\nexport default ConnectedApp;\n","import { createReducer } from 'redux-starter-kit';\nimport { ReduxState } from './Types';\nimport { selectCase } from './Actions';\n\nexport const initialState: ReduxState = {\n  caseId: undefined,\n}\n\nconst reducers = createReducer<ReduxState>(initialState, {\n  [selectCase.type]: (state: ReduxState, action) => { state.caseId = action.payload },\n});\n\nexport default reducers;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { configureStore } from 'redux-starter-kit';\nimport App from './App';\nimport './index.css';\nimport Reducers, { initialState } from './Reducers';\nimport * as serviceWorker from './serviceWorker';\nimport { ReduxState } from './Types';\nimport { selectCase } from './Actions';\n\nconst ReduxQuerySync = require('redux-query-sync').default;\n\nconst store = configureStore({\n  reducer: Reducers\n});\n\nReduxQuerySync({\n  store, // your Redux store\n  params: {\n    case: {\n      selector: (state: ReduxState) => state.caseId,\n      action: (value: string) => selectCase(value),\n      defaultValue: initialState.caseId\n    },\n  },\n  // Initially set the store's state to the current location.\n  initialTruth: 'location',\n})\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}